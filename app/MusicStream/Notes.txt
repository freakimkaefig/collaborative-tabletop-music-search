/* ---------- Search Spotify ---------- */
public void SpotifySearch()
{
	search = Search.Create(session, "artist:Katy Perry", 0, 0, 0, 250, 0, 0, 0, 0, SearchType.Standard, SessionListener.SearchComplete, null);
}

	public void SearchComplete(Search result, object nativeUserdata)
        {
            var album = result.Album(0);
            var albumName = album.Name();
            
            var artist = album.Artist().Name();

            var numTracks = result.NumTracks();

            var query = result.Query();

            //_musicStreamManager.logMessages.Enqueue("\tQUERY: " + query);
            //_musicStreamManager.logMessages.Enqueue("\tINTERPRET: " + artist);
            //_musicStreamManager.logMessages.Enqueue("\tALBUM: " + albumName);
        }


/* ---------- Get Track by ID ---------- */
Track track = Track.GetPlayable(_session, Link.CreateFromString("spotify:track:4lCv7b86sLynZbXhfScfm2").AsTrack());


/* ---------- Adding Songs to Playlist ---------- */
_playlistManager = new MusicStreamPlaylistManager(this, playlist);    //Creating new PlaylistManager
Track track = Track.GetPlayable(_session, Link.CreateFromString("spotify:track:4lCv7b86sLynZbXhfScfm2").AsTrack());
Track[] tracks = new Track[1];
tracks[0] = track
_playlistManager.AddTracksToPlaylist(session, playlist, GetTestTracks()); //Adding Tracks to playlist


/* ---------- Writing Bytes into File ---------- */
ByteArrayToFile("test.pcm", _copiedFrames);

public bool ByteArrayToFile(string _FileName, byte[] _ByteArray)
{
	try
    {
		// Open file for reading
        System.IO.FileStream _FileStream = new System.IO.FileStream(_FileName, System.IO.FileMode.Create, System.IO.FileAccess.Write);
        
		// Writes a block of bytes to this stream using data from a byte array.
        _FileStream.Write(_ByteArray, 0, _ByteArray.Length);
		
		// close file stream
        _FileStream.Close();
		
		return true;
	}
    catch (Exception _Exception)
    {
		// Error
        Console.WriteLine("Exception caught in process: {0}", _Exception.ToString());
    }
	
	// error occured, return false
    return false;
}

/* --------- GetTrackInfo -------- */
var test1 = playlist.Name();	//Getting Name of Playlist
var test2 = playlist.Track(0);	//Getting first Track of Playlist
var test3 = test2.Artist(0);	//Getting first Artist of Track
var test4 = test3.Name();		//Getting Name of Artist


/* ---------- PlaylistManager ---------- */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SpotifySharp;

namespace MusicStream
{
    class MusicStreamPlaylistManager
    {
        private MusicStreamSessionManager _sessionManager;
        private MusicStreamPlaylistListener _playlistListener;

        public MusicStreamPlaylistManager(MusicStreamSessionManager sessionManager, Playlist playlist)
        {
            // TODO: Complete member initialization
            this._sessionManager = sessionManager;

            _playlistListener = new MusicStreamPlaylistListener(_sessionManager);
            playlist.AddCallbacks(_playlistListener, null);
        }

        public void AddTracksToPlaylist(SpotifySession session, Playlist playlist, Track[] tracks)
        {
            playlist.AddTracks(tracks, playlist.NumTracks(), session);
        }

        public void RemoveTracksFromPlaylist(Playlist playlist, int[] tracks)
        {
            playlist.RemoveTracks(tracks);
        }

        public String GetPlaylistMetadata(Playlist playlist)
        {
            //Metadata in String packen und zurückgeben
            String name = playlist.Name();
            int numTracks = playlist.NumTracks();
            String description = playlist.GetDescription();

            return "Name: " + name + " | Description: " + description + " | Tracks: " + numTracks;
        }
    }
}

/* ---------------- Open Playlist -------------*/
public void OpenPlaylist(Playlist playlist)
        {
            logMessages.Enqueue("Opening Playlist: '" + playlist.Name() + "'.");
            _currentPlaylist = playlist;
            _playlistListener = new MusicStreamPlaylistListener(this);
            _currentPlaylist.AddCallbacks(_playlistListener, _userdata);

            //LoadTrack(playlist.Track(0));
            _currentTrackIndex = 0;
        }