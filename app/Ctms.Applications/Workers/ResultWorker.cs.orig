using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MusicSearch.ResponseObjects;
using Ctms.Applications.DataFactories;
using Ctms.Domain.Objects;
using Ctms.Applications.ViewModels;
using System.ComponentModel.Composition;
using Ctms.Applications.DataModels;
using SpotifySharp;
using MusicStream;

namespace Ctms.Applications.Workers
{
    [Export]
    public class ResultWorker
    {
        private ResultViewModel _resultViewModel;
        private MenuViewModel _menuViewModel;
        private MusicStreamAccountWorker _accountWorker;
        private MusicStreamSessionManager _sessionManager;

        [ImportingConstructor]
        public ResultWorker(ResultViewModel resultViewModel, MenuViewModel menuViewModel, MusicStreamAccountWorker accountWorker)
        {
            _resultViewModel = resultViewModel;
            _menuViewModel = menuViewModel;
            _accountWorker = accountWorker;

            _accountWorker.ResultSessionManagerCreated = ResultSessionManagerCreated;
        }

        private void ResultSessionManagerCreated(MusicStreamSessionManager sessionManager)
        {
            _sessionManager = sessionManager;
        }

        public bool CanRefreshResults() { return _resultViewModel.IsValid; }

        public void RefreshResults(List<ResponseContainer.ResponseObj.Song> response)
        {
<<<<<<< HEAD
            if (_menuViewModel.IsLoggedIn)
            {
                _resultViewModel.Results.Clear();
                for (int i = 0; i < response.Count; i++)
                {
                    for (int j = 0; j < response[i].tracks.Count; j++)
                    {
                        if(_sessionManager.CheckTrackAvailability(response[i].tracks[j].foreign_id) != null)
                        {
                            _resultViewModel.Results.Add(new ResultDataModel(response[i].Title, response[i].Artist_Name, _sessionManager.CheckTrackAvailability(response[i].tracks[j].foreign_id)));
                            j = response[i].tracks.Count;
                        }
                    }
                }
            }
            else
            {
                _menuViewModel.DisplayLoginDialog();
            }
=======
            /*
            //Example of how to read a resulting song and assign it to viewmodel
            SongFactory factory = new SongFactory();
            var result = new Result();
            Random rnd = new Random();
            int index = rnd.Next(0, responseContainer.Response.Songs.Count);
            result.Song = factory.Create(responseContainer.Response.Songs[index]);
            _resultViewModel.Result = result;*/
>>>>>>> origin/dev
        }
    }
}
